-- Creating Tables (Customer, Product, Sales, Sales_history, Salesperson) --

CREATE TABLE CUSTOMER (
    CUSTOMER_ID INT PRIMARY KEY,
    FIRST_NAME VARCHAR(50) NOT NULL,
    LAST_NAME VARCHAR(50) NOT NULL,
    MIDDLE_NAME VARCHAR(50),
    ADDRESS_LINE1 VARCHAR(80) NOT NULL,
    ADDRESS_LINE2 VARCHAR(80),
    CITY VARCHAR(40),
    COUNTRY VARCHAR(50),
    DATE_ADDED DATE,
    REGION VARCHAR(10)
);

CREATE TABLE PRODUCT (
    PRODUCT_ID INT PRIMARY KEY,
    PRODUCT_NAME VARCHAR(100) NOT NULL,
    STANDARD_COST DECIMAL(10,2) NOT NULL,
    COLOR VARCHAR(20),
    LIST_PRICE DECIMAL(10,2) NOT NULL,
    PRODUCT_SIZE DECIMAL(8,2),
    WEIGHT DECIMAL(10,2),
    PRODUCT_CATEGORY VARCHAR(20)
);

CREATE TABLE SALESPERSON (
    SALESPERSON_ID INT PRIMARY KEY,
    JOB_TITLE VARCHAR(80),
    FIRST_NAME VARCHAR(50),
    LAST_NAME VARCHAR(50),
    MIDDLE_NAME VARCHAR(50),
    ADDRESS_LINE1 VARCHAR(80),
    ADDRESS_LINE2 VARCHAR(80),
    CITY VARCHAR(40),
    COUNTRY VARCHAR(50),
    DATE_ADDED DATE
);

CREATE TABLE SALES (
    SALES_DATE DATE NOT NULL,
    ORDER_ID INT NOT NULL,
    PRODUCT_ID INT NOT NULL,
    CUSTOMER_ID INT NOT NULL,
    SALESPERSON_ID INT NOT NULL,
    QUANTITY INT NOT NULL,
    UNIT_PRICE DECIMAL(10,2),
    SALES_AMOUNT DECIMAL(10,2),
    TAX_AMOUNT DECIMAL(10,2),
    TOTAL_AMOUNT DECIMAL(10,2),
    PRIMARY KEY (ORDER_ID, PRODUCT_ID),
    FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT(PRODUCT_ID),
    FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID),
    FOREIGN KEY (SALESPERSON_ID) REFERENCES SALESPERSON(SALESPERSON_ID)
);

CREATE TABLE SALES_HISTORY (
    SALES_DATE DATE NOT NULL,
    ORDER_ID INT NOT NULL,
    PRODUCT_ID INT NOT NULL,
    CUSTOMER_ID INT NOT NULL,
    SALESPERSON_ID INT NOT NULL,
    QUANTITY INT NOT NULL,
    UNIT_PRICE DECIMAL(10,2),
    SALES_AMOUNT DECIMAL(10,2),
    TAX_AMOUNT DECIMAL(10,2),
    TOTAL_AMOUNT DECIMAL(10,2),
    PRIMARY KEY (ORDER_ID, PRODUCT_ID),
    FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT(PRODUCT_ID),
    FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID),
    FOREIGN KEY (SALESPERSON_ID) REFERENCES SALESPERSON(SALESPERSON_ID)
);

-- Inserting the values --

INSERT INTO CUSTOMER VALUES 
(10, 'JOHN', 'AMIRTHRAJ', 'T', '2345 PETERDRIVE', NULL, 'Atlanta', 'USA', '2015-01-12', 'SOUTH'),
(11, 'TOM', 'JOSEPH', 'A', '123SANDY DRIVE', NULL, 'New York', 'USA', '2015-01-12', 'SOUTH'),
(12, 'PETER', 'MANN', 'J', '3456 GATES DRIVE', NULL, 'Washington', 'USA', '2015-01-13', 'NORTH');

INSERT INTO PRODUCT VALUES 
(100, 'Mobile Cover', 30, NULL, 35, 10, 100, 'Mobile'),
(200, 'Samsung F7100', 80, 'BLACK', 100, 6, 50, 'Mobile'),
(105, 'HTC 7800', 70, 'BLACK', 80, 6, 40, 'Mobile'),
(106, 'Microsoft Keyboard 7865', 50, 'BLACK', 60, 3, 20, 'Computer'),
(501, 'Microsoft Mouse 7863', 30, 'GREY', 40, 1, 25, 'Computer'),
(101, 'iPhone', 500, 'GOLD', 600, 6, 20, 'Mobile');

INSERT INTO SALESPERSON VALUES 
(1000, 'South Manager', 'PETER', 'MANN', 'R', '4567 ASHFORDROAD', NULL, 'CUMMING', 'USA', '2014-01-12'),
(2000, 'North Manager', 'JOHN', 'KING', 'A', '67 DUNWOODY ROAD', NULL, 'LASVEGAS', 'USA', '2014-01-14'),
(3000, 'East Manager', 'BOB', 'MORIS', 'A', '679 GLENDRIGEDR', NULL, 'FLORIDA', 'USA', '2014-02-14');

INSERT INTO SALES VALUES 
('2015-02-01', 1269, 200, 12, 1000, 20, 80, 1600, 160, 1760),
('2015-01-01', 1267, 100, 10, 1000, 2, 20, 40, 4, 44),
('2015-01-01', 1267, 101, 10, 1000, 2, 30, 60, 6, 66),
('2015-01-02', 1268, 100, 11, 2000, 10, 30, 300, 30, 330),
('2015-02-09', 1270, 105, 10, 3000, 20, 70, 1400, 140, 1540),
('2015-02-09', 1270, 106, 10, 3000, 10, 50, 500, 50, 550),
('2015-02-09', 1270, 101, 10, 3000, 10, 30, 300, 30, 330);

INSERT INTO SALES_HISTORY VALUES 
('2015-01-01', 1267, 100, 10, 1000, 2, 20, 40, 4, 44),
('2015-01-01', 1267, 101, 10, 1000, 2, 30, 60, 6, 66),
('2015-01-07', 1268, 100, 11, 2000, 10, 30, 300, 30, 330);

-- What is the total sales revenue generated by each region? --

SELECT c.REGION, SUM(s.TOTAL_AMOUNT) AS TOTAL_REVENUE
FROM SALES s
JOIN CUSTOMER c ON s.CUSTOMER_ID = c.CUSTOMER_ID
GROUP BY c.REGION
ORDER BY TOTAL_REVENUE DESC;

-- Which 5 products generated the highest sales revenue?--

SELECT p.PRODUCT_NAME, SUM(s.QUANTITY) AS TOTAL_QUANTITY, SUM(s.SALES_AMOUNT) AS TOTAL_SALES
FROM SALES s
JOIN PRODUCT p ON s.PRODUCT_ID = p.PRODUCT_ID
GROUP BY p.PRODUCT_NAME
ORDER BY TOTAL_SALES DESC
LIMIT 5;

-- What are the monthly sales trends over time? --

SELECT DATE_FORMAT(SALES_DATE, '%Y-%m') AS SALES_MONTH, SUM(TOTAL_AMOUNT) AS TOTAL_REVENUE
FROM SALES
GROUP BY SALES_MONTH
ORDER BY SALES_MONTH;

-- How much revenue did each salesperson generate?--

SELECT sp.FIRST_NAME, sp.LAST_NAME, SUM(s.TOTAL_AMOUNT) AS TOTAL_SALES
FROM SALES s
JOIN SALESPERSON sp ON s.SALESPERSON_ID = sp.SALESPERSON_ID
GROUP BY sp.FIRST_NAME, sp.LAST_NAME
ORDER BY TOTAL_SALES DESC;

-- Which customers made the highest number of purchases and how much did they spend? --

SELECT c.FIRST_NAME, c.LAST_NAME, COUNT(DISTINCT s.ORDER_ID) AS TOTAL_ORDERS, SUM(s.TOTAL_AMOUNT) AS TOTAL_SPENT
FROM SALES s
JOIN CUSTOMER c ON s.CUSTOMER_ID = c.CUSTOMER_ID
GROUP BY c.CUSTOMER_ID, c.FIRST_NAME, c.LAST_NAME
ORDER BY TOTAL_SPENT DESC;

-- Which product categories drive the most revenue?--

SELECT PRODUCT_CATEGORY, sum(TOTAL_AMOUNT) AS CATEGORY_REVENUE
FROM sales s
JOIN PRODUCT p ON s.PRODUCT_ID = p.PRODUCT_ID
GROUP BY PRODUCT_CATEGORY
ORDER BY CATEGORY_REVENUE
DESC;

-- What is the average order value across all transactions? --

SELECT avg(TOTAL_AMOUNT) AS AVERAGE_ORDER_VALUE
FROM sales;

-- What is the reorder rate of customers (customers who made more than 1 purchase)? --

SELECT COUNT(DISTINCT CUSTOMER_ID) AS TOTAL_REPEAT_CUSTOMERS
FROM (
    SELECT CUSTOMER_ID
    FROM SALES
    GROUP BY CUSTOMER_ID
    HAVING COUNT(DISTINCT ORDER_ID) > 1
) sub;

-- Which sales orders include multiple products?--

SELECT ORDER_ID, COUNT(DISTINCT PRODUCT_ID) AS NUM_PRODUCTS
FROM SALES
GROUP BY ORDER_ID
HAVING COUNT(DISTINCT PRODUCT_ID) > 1;

-- Which products are most frequently bundled together in the same order? -- 

SELECT s1.PRODUCT_ID AS PRODUCT_1, s2.PRODUCT_ID AS PRODUCT_2, COUNT(*) AS TIMES_BUNDLED
FROM SALES s1
JOIN SALES s2 ON s1.ORDER_ID = s2.ORDER_ID 
AND s1.PRODUCT_ID < s2.PRODUCT_ID
GROUP BY s1.PRODUCT_ID, s2.PRODUCT_ID
ORDER BY TIMES_BUNDLED DESC
LIMIT 5;

-- IMPLEMENTING ADVANCED FEATURES --

-- 1. Windows Functions : Ranking Top Products --

SELECT PRODUCT_NAME, SUM(SALES_AMOUNT) AS TOTAL_SALES, 
RANK() OVER (ORDER BY SUM(SALES_AMOUNT) DESC) AS SALES_RANK
FROM SALES s
JOIN PRODUCT p ON s.PRODUCT_ID = p.PRODUCT_ID
GROUP BY PRODUCT_NAME;

-- 2. CTEs (Common Table Expressions): Reusable query for repeat customers --

WITH repeat_customers AS (
    SELECT CUSTOMER_ID
    FROM SALES
    GROUP BY CUSTOMER_ID
    HAVING COUNT(ORDER_ID) > 1
)
SELECT c.FIRST_NAME, c.LAST_NAME
FROM CUSTOMER c
JOIN repeat_customers rc ON c.CUSTOMER_ID = rc.CUSTOMER_ID;

